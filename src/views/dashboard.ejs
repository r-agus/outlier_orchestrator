<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Control Panel - Discharge classification system</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="/node_modules/chart.js/dist/chart.umd.js"></script>
    <style>
        body {
            padding-top: 20px;
            background-color: #f8f9fa;
        }

        .model-card {
            height: 100%;
        }

        .model-status {
            font-size: 1.2rem;
            font-weight: bold;
        }

        .status-online {
            color: #198754;
        }

        .status-offline {
            color: #dc3545;
        }

        .status-disabled {
            color: #6c757d;
        }

        .status-unknown {
            color: #fd7e14;
        }

        .card-header {
            font-weight: bold;
        }

        .prediction-item {
            border-left: 4px solid transparent;
            margin-bottom: 10px;
            padding: 10px;
            background-color: #fff;
            border-radius: 4px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, .1);
        }

        .prediction-class-0 {
            border-left-color: #0d6efd;
        }

        .prediction-class-1 {
            border-left-color: #dc3545;
        }

        .prediction-undefined {
            border-left-color: #6c757d;
        }

        .confidence-bar {
            height: 8px;
            margin-top: 5px;
            border-radius: 4px;
            background-color: #e9ecef;
        }

        .confidence-value {
            height: 100%;
            border-radius: 4px;
            background-color: #0d6efd;
        }

        .timestamp {
            color: #6c757d;
            font-size: 0.8rem;
        }

        .nav-tabs {
            margin-bottom: 15px;
        }

        .nav-tabs .nav-link {
            min-width: 120px;
            text-align: center;
        }

        .form-file {
            margin-bottom: 15px;
        }

        .sensor-file-item {
            border: 1px solid #ddd;
            border-radius: 4px;
            padding: 10px;
            margin-bottom: 10px;
            background-color: #fff;
        }

        .sensor-file-item .form-control {
            margin-top: 5px;
        }

        .sensor-files-container {
            max-height: 400px;
            overflow-y: auto;
        }

        .sensor-preview {
            font-family: monospace;
            font-size: 12px;
            white-space: pre;
            overflow: hidden;
            max-height: 100px;
        }

        .btn-group-sm .btn {
            margin-right: 5px;
        }

        .models-row {
            display: flex;
            flex-wrap: wrap;
        }

        .model-col {
            flex: 0 0 33.333333%;
            max-width: 33.333333%;
            padding: 0 10px;
            margin-bottom: 20px;
        }

        @media (max-width: 992px) {
            .model-col {
                flex: 0 0 50%;
                max-width: 50%;
            }
        }

        @media (max-width: 768px) {
            .model-col {
                flex: 0 0 100%;
                max-width: 100%;
            }
        }

        .card {
            height: 100%;
        }

        .discharge-item {
            border: 1px solid #ddd;
            border-radius: 4px;
            padding: 15px;
            margin-bottom: 15px;
            background-color: #fff;
        }

        .discharge-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid #eee;
            padding-bottom: 10px;
            margin-bottom: 15px;
        }

        .discharge-files {
            margin-top: 10px;
            max-height: 200px;
            overflow-y: auto;
            padding: 0;
        }

        .discharge-file-item {
            border-bottom: 1px solid #eee;
            padding: 8px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .discharge-file-item:last-child {
            border-bottom: none;
        }

        .anomaly-time-input {
            max-width: 200px;
        }

        .collapsible {
            cursor: pointer;
        }

        .collapse-indicator {
            transition: transform 0.3s ease;
        }

        .collapsed .collapse-indicator {
            transform: rotate(-90deg);
        }

        .chart-grid {
            display: grid;
            gap: 25px;
            margin-top: 20px;
            padding: 10px 0;
        }

        .chart-grid.single-chart {
            grid-template-columns: 1fr;
        }

        .chart-grid.multiple-charts-1 {
            grid-template-columns: 1fr;
        }

        .chart-grid.multiple-charts-2 {
            grid-template-columns: 1fr 1fr;
        }

        .chart-grid.multiple-charts-3 {
            grid-template-columns: 1fr;
        }

        .chart-grid.multiple-charts-4 {
            grid-template-columns: 1fr;
        }

        .chart-grid.multiple-charts-more {
            grid-template-columns: 1fr;
        }

        .chart-container-preview {
            position: relative;
            height: 400px;
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            transition: box-shadow 0.3s ease, transform 0.2s ease;
        }

        .chart-container-preview:hover {
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
            transform: translateY(-2px);
        }

        .chart-title {
            text-align: center;
            font-weight: 600;
            margin-bottom: 15px;
            color: #495057;
            font-size: 16px;
            padding: 10px 0;
            border-bottom: 2px solid #dee2e6;
            background: rgba(255, 255, 255, 0.8);
            border-radius: 4px 4px 0 0;
            margin: -20px -20px 15px -20px;
            padding: 15px 20px;
        }

        .chart-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
            padding: 5px 0;
        }

        .chart-header .chart-title {
            margin-bottom: 0;
            flex: 1;
            text-align: left;
        }

        .fullscreen-btn {
            background: #007bff;
            color: white;
            border: none;
            border-radius: 4px;
            padding: 5px 10px;
            font-size: 12px;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .fullscreen-btn:hover {
            background: #0056b3;
        }

        .fullscreen-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background: rgba(0, 0, 0, 0.9);
            z-index: 9999;
            display: none;
            flex-direction: column;
        }

        .fullscreen-modal-header {
            background: #333;
            color: white;
            padding: 15px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-shrink: 0;
        }

        .fullscreen-modal-title {
            font-size: 18px;
            font-weight: bold;
        }

        .fullscreen-close-btn {
            background: #dc3545;
            color: white;
            border: none;
            border-radius: 4px;
            padding: 8px 12px;
            cursor: pointer;
            font-size: 14px;
        }

        .fullscreen-close-btn:hover {
            background: #c82333;
        }

        .fullscreen-chart-container {
            flex: 1;
            padding: 20px;
            position: relative;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
        }

        .fullscreen-single-chart {
            flex: 1;
            min-height: 0;
        }

        .fullscreen-multiple-charts {
            display: grid;
            gap: 20px;
            height: 100%;
            align-content: stretch;
        }

        .fullscreen-multiple-charts.charts-1 {
            grid-template-columns: 1fr;
        }

        .fullscreen-multiple-charts.charts-2 {
            grid-template-columns: 1fr 1fr;
        }

        .fullscreen-multiple-charts.charts-3 {
            grid-template-columns: 1fr;
        }

        .fullscreen-multiple-charts.charts-4 {
            grid-template-columns: 1fr;
        }

        .fullscreen-multiple-charts.charts-more {
            grid-template-columns: 1fr;
        }

        .fullscreen-chart-item {
            position: relative;
            background: rgba(248, 249, 250, 0.95);
            border-radius: 8px;
            padding: 20px;
            display: flex;
            flex-direction: column;
            border: 1px solid rgba(222, 226, 230, 0.5);
            min-height: 400px;
        }

        .fullscreen-chart-title {
            text-align: center;
            font-weight: 600;
            margin-bottom: 15px;
            color: #495057;
            font-size: 16px;
            flex-shrink: 0;
            padding: 15px 20px;
            border-bottom: 2px solid rgba(222, 226, 230, 0.6);
            background: rgba(255, 255, 255, 0.9);
            border-radius: 4px 4px 0 0;
            margin: -20px -20px 15px -20px;
        }

        .fullscreen-chart-item canvas {
            flex: 1;
            width: 100% !important;
            min-height: 300px !important;
        }

        /* Responsive fullscreen layouts */
        @media (max-width: 1200px) {
            .fullscreen-multiple-charts.charts-2 {
                grid-template-columns: 1fr;
            }
        }

        @media (max-width: 768px) {
            .fullscreen-multiple-charts.charts-2 {
                grid-template-columns: 1fr;
            }

            .chart-grid.multiple-charts-2 {
                grid-template-columns: 1fr;
            }

            .fullscreen-chart-item {
                padding: 15px;
                min-height: 250px;
            }

            .chart-container-preview {
                height: 300px;
                padding: 15px;
            }

            .chart-title {
                font-size: 14px;
                margin: -15px -15px 15px -15px;
                padding: 12px 15px;
            }

            .fullscreen-modal-header {
                padding: 10px 15px;
            }

            .fullscreen-modal-title {
                font-size: 16px;
            }
        }

        .preview-selection-item {
            border: 1px solid #ddd;
            border-radius: 4px;
            padding: 10px;
            margin-bottom: 10px;
            background-color: #fff;
            cursor: pointer;
            transition: border-color 0.2s;
        }

        .preview-selection-item:hover {
            border-color: #007bff;
        }

        .preview-selection-item.selected {
            border-color: #007bff;
            background-color: #f8f9ff;
        }

        .signal-selection-item {
            border: 1px solid #eee;
            border-radius: 4px;
            padding: 8px;
            margin: 5px 0;
            background-color: #f9f9f9;
            cursor: pointer;
            transition: all 0.2s;
        }

        .signal-selection-item:hover {
            border-color: #007bff;
            background-color: #f0f8ff;
        }        .signal-selection-item.selected {
            border-color: #007bff;
            background-color: #e3f2fd;
            font-weight: bold;
        }

        .multiple-discharge-pattern-input {
            font-family: monospace;
            font-size: 14px;
        }

        .pattern-example {
            font-family: monospace;
            font-size: 12px;
            color: #6c757d;
            background-color: #f8f9fa;
            padding: 5px;
            border-radius: 3px;
            margin-top: 5px;
        }

        .file-count-preview {
            font-size: 14px;
            color: #28a745;
            font-weight: bold;
        }
    </style>
</head>

<body>
    <div class="container">
        <header class="pb-3 mb-4 border-bottom">
            <div class="d-flex justify-content-between align-items-center">
                <h1 class="fw-bold">Anomaly detection system</h1>
                <div>
                    <button id="refreshBtn" class="btn btn-sm btn-outline-secondary">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                            class="bi bi-arrow-repeat" viewBox="0 0 16 16">
                            <path
                                d="M11.534 7h3.932a.25.25 0 0 1 .192.41l-1.966 2.36a.25.25 0 0 1-.384 0l-1.966-2.36a.25.25 0 0 1 .192-.41zm-11 2h3.932a.25.25 0 0 0 .192-.41L2.692 6.23a.25.25 0 0 0-.384 0L.342 8.59A.25.25 0 0 0 .534 9z" />
                            <path fill-rule="evenodd"
                                d="M8 3c-1.552 0-2.94.707-3.857 1.818a.5.5 0 1 1-.771-.636A6.002 6.002 0 0 1 13.917 7H12.9A5.002 5.002 0 0 0 8 3zM3.1 9a5.002 5.002 0 0 0 8.757 2.182.5.5 0 1 1 .771.636A6.002 6.002 0 0 1 2.083 9H3.1z" />
                        </svg>
                        Actualizar Estado
                    </button>
                    <button class="btn btn-sm btn-outline-primary" data-bs-toggle="modal" data-bs-target="#configModal">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                            class="bi bi-gear" viewBox="0 0 16 16">
                            <path d="M8 4.754a.246.246 0 1 1 0-.5.246.246 0 0 1 0 .5z" />
                            <path
                                d="M9.796 1.343c-.527-1.79-3.065-1.79-3.592 0l-.094.319a.873.873 0 0 1-1.255.52l-.292-.16c-1.64-.892-3.433.902-2.54 2.541l.159.292a.873.873 0 0 1-.52 1.255l-.319.094c-1.79.527-1.79 3.065 0 3.592l.319.094a.873.873 0 0 1 .52 1.255l-.16.292c-.892 1.64.901 3.434 2.541 2.54l.292-.159a.873.873 0 0 1 1.255.52l.094.319c.527 1.79 3.065 1.79 3.592 0l.094-.319a.873.873 0 0 1 1.255-.52l.292.16c1.64.893 3.434-.902 2.54-2.541l-.159-.292a.873.873 0 0 1 .52-1.255l.319-.094c1.79-.527 1.79-3.065 0-3.592l-.319-.094a.873.873 0 0 1-.52-1.255l.16-.292c.893-1.64-.902-3.433-2.541-2.54l-.292.159a.873.873 0 0 1-1.255-.52l-.094-.319zm-2.633.283c.246-.835 1.428-.835 1.674 0l.094.319a1.873 1.873 0 0 0 2.693 1.115l.291-.16c.764-.415 1.6.42 1.184 1.185l-.159.292a1.873 1.873 0 0 0 1.116 2.692l.318.094c.835.246.835 1.428 0 1.674l-.319.094a1.873 1.873 0 0 0-1.115 2.693l.16.291c.415.764-.42 1.6-1.185 1.184l-.291-.159a1.873 1.873 0 0 0-2.693 1.116l-.094.318c-.246.835-1.428.835-1.674 0l-.094-.319a1.873 1.873 0 0 0-2.692-1.115l-.292.16c-.764.415-1.6-.42-1.184-1.185l.159-.291A1.873 1.873 0 0 0 1.945 8.93l-.319-.094c-.835-.246-.835-1.428 0-1.674l.319-.094A1.873 1.873 0 0 0 3.06 4.377l-.16-.292c-.415-.764.42-1.6 1.185-1.184l.292.159a1.873 1.873 0 0 0 2.692-1.115l.094-.319z" />
                        </svg>
                        Configurar
                    </button>
                </div>
            </div>
        </header>

        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                        <span>Model Status</span>
                        <button class="btn btn-light btn-sm" id="addModelBtn">Add Model</button>
                    </div>
                    <div class="card-body">
                        <div class="models-row" id="modelsContainer">
                            <!-- Models will be added dynamically here -->
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-12">
                <ul class="nav nav-tabs" id="dataTabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="prediction-tab" data-bs-toggle="tab"
                            data-bs-target="#prediction" type="button" role="tab" aria-controls="prediction"
                            aria-selected="true">Prediction</button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="training-tab" data-bs-toggle="tab" data-bs-target="#training"
                            type="button" role="tab" aria-controls="training" aria-selected="false">Training</button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="history-tab" data-bs-toggle="tab" data-bs-target="#history"
                            type="button" role="tab" aria-controls="history" aria-selected="false">History</button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="preview-tab" data-bs-toggle="tab" data-bs-target="#preview"
                            type="button" role="tab" aria-controls="preview" aria-selected="false">Preview</button>
                    </li>
                </ul>
            </div>
        </div>

        <div class="tab-content">
            <!-- Prediction Tab -->
            <div class="tab-pane fade show active" id="prediction" role="tabpanel" aria-labelledby="prediction-tab">
                <div class="row">
                    <div class="col-md-12 mb-4">
                        <div class="card">
                            <div class="card-header bg-primary text-white">
                                Prediction
                            </div>
                            <div class="card-body">
                                <div class="alert alert-info mb-3">
                                    <strong>Information:</strong> You can upload multiple text files (.txt) containing
                                    signal data or use the JSON format directly.
                                </div>

                                <ul class="nav nav-pills mb-3" id="predictionOptions" role="tablist">
                                    <li class="nav-item" role="presentation">
                                        <button class="nav-link active" id="text-files-tab" data-bs-toggle="pill"
                                            data-bs-target="#text-files-content" type="button" role="tab"
                                            aria-controls="text-files-content" aria-selected="true">Text files</button>
                                    </li>
                                    <li class="nav-item" role="presentation">
                                        <button class="nav-link" id="json-input-tab" data-bs-toggle="pill"
                                            data-bs-target="#json-input-content" type="button" role="tab"
                                            aria-controls="json-input-content" aria-selected="false">JSON</button>
                                    </li>
                                </ul>

                                <div class="tab-content" id="predictionOptionsContent">
                                    <!-- Text File Option -->
                                    <div class="tab-pane fade show active" id="text-files-content" role="tabpanel"
                                        aria-labelledby="text-files-tab">
                                        <div class="mb-3">
                                            <label for="sensorFilesInput" class="form-label">Signal Files (.txt)</label>
                                            <input type="file" class="form-control" id="sensorFilesInput" multiple
                                                accept=".txt" aria-describedby="sensorFilesHelp">
                                            <div id="sensorFilesHelp" class="form-text">Select the text files containing
                                                the signal data (one file per signal).</div>
                                        </div>

                                        <div class="sensor-files-container mb-3" id="sensorFilesContainer">
                                            <div class="text-center text-muted py-3" id="noFilesMsg">
                                                No files uploaded
                                            </div>
                                            <!-- Signal files will be displayed here -->
                                        </div>

                                        <div class="d-grid">
                                            <button id="processSensorFilesBtn" class="btn btn-primary" disabled>Process
                                                and Make Prediction</button>
                                        </div>
                                    </div>

                                    <!-- JSON option -->
                                    <div class="tab-pane fade" id="json-input-content" role="tabpanel"
                                        aria-labelledby="json-input-tab">
                                        <div class="mb-3">
                                            <label for="predictionFile" class="form-label">Upload JSON</label>
                                            <div class="d-flex">
                                                <input type="file" class="form-control" id="predictionFile"
                                                    accept=".json" aria-describedby="predictionFileHelp">
                                            </div>
                                            <div id="predictionFileHelp" class="form-text">Select a JSON file containing
                                                prediction data.</div>
                                        </div>
                                        <div class="mb-3">
                                            <label for="testDataTextarea" class="form-label">Data (JSON format)</label>
                                            <textarea class="form-control" id="testDataTextarea" rows="8"
                                                placeholder='{ "signals": [{ "fileName": "sensor1.txt", "times": [41.052, 41.054, ...], "values": [-759337, -760461, ...], "length": 5, "anomalyTime": null }] }'></textarea>
                                        </div>
                                        <div class="d-grid">
                                            <button id="testPredictionBtn" class="btn btn-primary">Predict</button>
                                        </div>
                                    </div>
                                </div>

                                <div id="predictionResultContainer" class="mt-3" style="display: none;">
                                    <h5>Result:</h5>
                                    <div class="alert" id="predictionResult">
                                        <!-- Predict results -->
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Training Tab -->
            <div class="tab-pane fade" id="training" role="tabpanel" aria-labelledby="training-tab">
                <div class="row">
                    <div class="col-md-12 mb-4">
                        <div class="card">
                            <div class="card-header bg-primary text-white">
                                Training
                            </div>
                            <div class="card-body">
                                <div class="alert alert-warning mb-3">
                                    <strong>Important:</strong> The training will send data to all enabled models. Each
                                    model will perform its own preprocessing.
                                </div>

                                <ul class="nav nav-pills mb-3" id="trainingOptions" role="tablist">
                                    <li class="nav-item" role="presentation">
                                        <button class="nav-link active" id="training-text-files-tab"
                                            data-bs-toggle="pill" data-bs-target="#training-text-files-content"
                                            type="button" role="tab" aria-controls="training-text-files-content"
                                            aria-selected="true">Text files</button>
                                    </li>
                                    <li class="nav-item" role="presentation">
                                        <button class="nav-link" id="training-json-input-tab" data-bs-toggle="pill"
                                            data-bs-target="#training-json-input-content" type="button" role="tab"
                                            aria-controls="training-json-input-content"
                                            aria-selected="false">JSON</button>
                                    </li>
                                </ul>

                                <div class="tab-content" id="trainingOptionsContent">
                                    <!-- Text file option for training -->
                                    <div class="tab-pane fade show active" id="training-text-files-content"
                                        role="tabpanel" aria-labelledby="training-text-files-tab">
                                        <div class="mb-3">
                                            <div class="d-flex justify-content-between mb-3">
                                                <div>
                                                    <input type="file" class="form-control" id="disruptionTimesFile"
                                                        accept=".txt" style="display: inline-block; width: auto;">
                                                    <button id="loadDisruptionTimesBtn"
                                                        class="btn btn-outline-info ms-2">
                                                        Load disruption times
                                                    </button>
                                                </div>                                                <button id="addDischargeBtn" class="btn btn-outline-primary">
                                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16"
                                                        fill="currentColor" class="bi bi-plus-lg" viewBox="0 0 16 16">
                                                        <path
                                                            d="M8 0a1 1 0 0 1 1 1v6h6a1 1 0 1 1 0 2H9v6a1 1 0 1 1-2 0V9H1a1 1 0 0 1 0-2h6V1a1 1 0 0 1 1-1z" />
                                                    </svg>
                                                    Add discharge
                                                </button>
                                                <button id="addMultipleDischargesBtn" class="btn btn-outline-success ms-2">
                                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16"
                                                        fill="currentColor" class="bi bi-plus-square-fill" viewBox="0 0 16 16">
                                                        <path d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2zm6.5 4.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3a.5.5 0 0 1 1 0z"/>
                                                    </svg>
                                                    Add Multiple Discharges
                                                </button>
                                            </div>
                                        </div>

                                        <div class="discharges-container mb-3" id="dischargesContainer">
                                            <div class="text-center text-muted py-3" id="noDischargesMsg">
                                                No discharges added
                                            </div>
                                            <!-- Discharges will be displayed here -->
                                        </div>

                                        <div class="mb-3">
                                            <div class="card">
                                                <div
                                                    class="card-header d-flex justify-content-between align-items-center">
                                                    <span>JSON Preview</span>
                                                    <div>
                                                        <button class="btn btn-sm btn-outline-success me-2"
                                                            id="downloadJsonBtn">
                                                            <svg xmlns="http://www.w3.org/2000/svg" width="16"
                                                                height="16" fill="currentColor" class="bi bi-download"
                                                                viewBox="0 0 16 16">
                                                                <path
                                                                    d="M.5 9.9a.5.5 0 0 1 .5.5v2.5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.5a.5.5 0 0 1 1 0v2.5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-2.5a.5.5 0 0 1 .5-.5z" />
                                                                <path
                                                                    d="M7.646 11.854a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V1.5a.5.5 0 0 0-1 0v8.793L5.354 8.146a.5.5 0 1 0-.708.708l3 3z" />
                                                            </svg>
                                                            Download JSON
                                                        </button>
                                                        <button class="btn btn-sm btn-outline-secondary"
                                                            id="togglePreviewBtn">
                                                            Show/Hide Preview
                                                        </button>
                                                    </div>
                                                </div>
                                                <div class="card-body" id="jsonPreviewContainer" style="display: none;">
                                                    <div class="alert alert-info mb-3">
                                                        <strong>Note:</strong> This is a simplified view. Only the first
                                                        lines of each file are shown for clarity.
                                                    </div>
                                                    <pre id="jsonPreview" class="bg-light p-3 rounded"
                                                        style="max-height: 200px; overflow: auto; font-size: 12px;"></pre>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="d-grid">
                                            <button id="processDischargesBtn" class="btn btn-warning" disabled>Process
                                                and Start Training</button>
                                        </div>
                                    </div>

                                    <!-- JSON input option for training -->
                                    <div class="tab-pane fade" id="training-json-input-content" role="tabpanel"
                                        aria-labelledby="training-json-input-tab">
                                        <div class="mb-3">
                                            <label class="form-label">Upload JSON</label>
                                            <div class="d-flex">
                                                <input type="file" class="form-control" id="trainingFile"
                                                    accept=".json">
                                            </div>
                                        </div>
                                        <div class="mb-3">
                                            <label for="trainingDataTextarea" class="form-label">Data (JSON
                                                format)</label>
                                            <textarea class="form-control" id="trainingDataTextarea" rows="8"
                                                placeholder='{ "signals": [{ "fileName": "sensor1.txt", "times": [41.052, 41.054, ...], "values": [-759337, -760461, ...], "length": 5, "anomalyTime": 41.056 }] }'></textarea>
                                        </div>
                                        <div class="d-grid">
                                            <button id="startTrainingBtn" class="btn btn-warning">Start
                                                Training</button>
                                        </div>
                                    </div>
                                </div>

                                <div id="trainingResultContainer" class="mt-3" style="display: none;">
                                    <h5>Result:</h5>
                                    <div class="alert" id="trainingResult">
                                        <!-- Training results -->
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Tab de Historial -->
            <div class="tab-pane fade" id="history" role="tabpanel" aria-labelledby="history-tab">
                <div class="row">
                    <div class="col-md-12 mb-4">
                        <div class="card">
                            <div class="card-header bg-primary text-white">
                                Prediction History
                            </div>
                            <div class="card-body">
                                <div id="predictionHistory" class="overflow-auto" style="max-height: 400px;">
                                    <!-- The history will be added dynamically here -->
                                    <div class="text-center text-muted" id="noPredictionsMsg">
                                        No predictions recorded
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Preview Tab -->
            <div class="tab-pane fade" id="preview" role="tabpanel" aria-labelledby="preview-tab">
                <div class="row">
                    <div class="col-md-12 mb-4">
                        <div class="card">
                            <div class="card-header bg-primary text-white">
                                Signal Preview & Visualization
                            </div>
                            <div class="card-body">
                                <div class="alert alert-info mb-3">
                                    <strong>Preview Options:</strong> Visualize signals from your discharge data in
                                    different ways.
                                </div>

                                <!-- Preview Mode Selection -->
                                <div class="row mb-4">
                                    <div class="col-md-6">
                                        <div class="card preview-selection-item" id="singleChartMode"
                                            style="cursor: pointer;">
                                            <div class="card-body text-center">
                                                <h5 class="card-title">Single Chart Mode</h5>
                                                <p class="card-text">Plot signals from different discharges on one chart
                                                    for comparison</p>
                                                <button class="btn btn-primary"
                                                    onclick="selectPreviewMode('single')">Select</button>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="card preview-selection-item" id="multipleChartsMode"
                                            style="cursor: pointer;">
                                            <div class="card-body text-center">
                                                <h5 class="card-title">Multiple Charts Mode</h5>
                                                <p class="card-text">Plot all signals from one discharge on separate
                                                    charts</p>
                                                <button class="btn btn-primary"
                                                    onclick="selectPreviewMode('multiple')">Select</button>
                                            </div>
                                        </div>
                                    </div>
                                </div> <!-- Single Chart Mode Interface -->
                                <div id="singleChartInterface" class="preview-interface" style="display: none;">
                                    <h6>Single Chart Mode - Signal Comparison</h6>
                                    <div class="row">
                                        <div class="col-md-4">
                                            <div class="card">
                                                <div class="card-header">
                                                    <h6 class="mb-0">Upload Signal Files</h6>
                                                </div>
                                                <div class="card-body">
                                                    <div class="mb-3">
                                                        <label for="singleModeFiles" class="form-label">Select signal
                                                            files (.txt):</label>
                                                        <input type="file" class="form-control" id="singleModeFiles"
                                                            multiple accept=".txt" onchange="loadSingleModeFiles()">
                                                        <small class="form-text text-muted">Select multiple .txt files
                                                            to compare</small>
                                                    </div>
                                                    <div class="mb-3">
                                                        <label class="form-label">Loaded Files:</label>
                                                        <div id="singleModeFilesList" class="overflow-auto"
                                                            style="max-height: 200px; border: 1px solid #dee2e6; padding: 10px; border-radius: 4px;">
                                                            <small class="text-muted">No files loaded</small>
                                                        </div>
                                                    </div>
                                                    <div class="d-grid gap-2">
                                                        <button class="btn btn-success" onclick="plotSingleChart()"
                                                            id="plotSingleBtn" disabled>Plot Comparison Chart</button>
                                                        <button class="btn btn-secondary"
                                                            onclick="clearSingleChart()">Clear Chart</button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-8">
                                            <div class="card">
                                                <div
                                                    class="card-header d-flex justify-content-between align-items-center">
                                                    <h6 class="mb-0">Chart Visualization</h6> <button
                                                        class="btn btn-sm btn-outline-secondary fullscreen-btn"
                                                        id="singleChartFullscreenBtn"
                                                        onclick="openSingleChartFullscreen()" disabled>
                                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16"
                                                            fill="currentColor" viewBox="0 0 16 16">
                                                            <path
                                                                d="M5.828 10.172a.5.5 0 0 0-.707 0l-4.096 4.096V11.5a.5.5 0 0 0-1 0v3.975a.5.5 0 0 0 .5.5H4.5a.5.5 0 0 0 0-1H1.732l4.096-4.096a.5.5 0 0 0 0-.707zm4.344 0a.5.5 0 0 1 .707 0l4.096 4.096V11.5a.5.5 0 1 1 1 0v3.975a.5.5 0 0 1-.5.5H11.5a.5.5 0 0 1 0-1h2.768l-4.096-4.096a.5.5 0 0 1 0-.707zm0-4.344a.5.5 0 0 0 .707 0l4.096-4.096V4.5a.5.5 0 1 0 1 0V.525a.5.5 0 0 0-.5-.5H11.5a.5.5 0 0 0 0 1h2.768l-4.096 4.096a.5.5 0 0 0 0 .707zm-4.344 0a.5.5 0 0 1-.707 0L1.025 1.732V4.5a.5.5 0 0 1-1 0V.525a.5.5 0 0 1 .5-.5H4.5a.5.5 0 0 1 0 1H1.732l4.096 4.096a.5.5 0 0 1 0 .707z" />
                                                        </svg>
                                                    </button>
                                                </div>
                                                <div class="card-body" style="background-color: #f8f9fa;">
                                                    <div class="chart-container-preview">
                                                        <canvas id="singleComparisonChart"></canvas>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-- Multiple Charts Mode Interface -->
                                <div id="multipleChartsInterface" class="preview-interface" style="display: none;">
                                    <h6>Multiple Charts Mode - Individual Signal Plots</h6>
                                    <div class="row">
                                        <div class="col-md-3">
                                            <div class="card">
                                                <div class="card-header">
                                                    <h6 class="mb-0">Upload Signal Files</h6>
                                                </div>
                                                <div class="card-body">
                                                    <div class="mb-3">
                                                        <label for="multipleModeFiles" class="form-label">Select signal
                                                            files (.txt):</label>
                                                        <input type="file" class="form-control" id="multipleModeFiles"
                                                            multiple accept=".txt" onchange="loadMultipleModeFiles()">
                                                        <small class="form-text text-muted">Select multiple .txt files
                                                            to plot separately</small>
                                                    </div>
                                                    <div class="mb-3">
                                                        <label class="form-label">Loaded Files:</label>
                                                        <div id="multipleModeFilesList" class="overflow-auto"
                                                            style="max-height: 200px;">
                                                            <small class="text-muted">No files loaded</small>
                                                        </div>
                                                    </div>
                                                    <div class="d-grid gap-2">
                                                        <button class="btn btn-success" onclick="plotMultipleCharts()"
                                                            id="plotMultipleBtn" disabled>Plot All Charts</button>
                                                        <button class="btn btn-secondary"
                                                            onclick="clearMultipleCharts()">Clear Charts</button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-9">
                                            <div class="card">
                                                <div
                                                    class="card-header d-flex justify-content-between align-items-center">
                                                    <h6 class="mb-0">Signal Charts</h6>
                                                    <button class="btn btn-sm btn-outline-secondary fullscreen-btn"
                                                        id="multipleChartsFullscreenBtn"
                                                        onclick="openMultipleChartsFullscreen()" disabled>
                                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16"
                                                            fill="currentColor" viewBox="0 0 16 16">
                                                            <path
                                                                d="M5.828 10.172a.5.5 0 0 0-.707 0l-4.096 4.096V11.5a.5.5 0 0 0-1 0v3.975a.5.5 0 0 0 .5.5H4.5a.5.5 0 0 0 0-1H1.732l4.096-4.096a.5.5 0 0 0 0-.707zm4.344 0a.5.5 0 0 1 .707 0l4.096 4.096V11.5a.5.5 0 1 1 1 0v3.975a.5.5 0 0 1-.5.5H11.5a.5.5 0 0 1 0-1h2.768l-4.096-4.096a.5.5 0 0 1 0-.707zm0-4.344a.5.5 0 0 0 .707 0l4.096-4.096V4.5a.5.5 0 1 0 1 0V.525a.5.5 0 0 0-.5-.5H11.5a.5.5 0 0 0 0 1h2.768l-4.096 4.096a.5.5 0 0 0 0 .707zm-4.344 0a.5.5 0 0 1-.707 0L1.025 1.732V4.5a.5.5 0 0 1-1 0V.525a.5.5 0 0 1 .5-.5H4.5a.5.5 0 0 1 0 1H1.732l4.096 4.096a.5.5 0 0 1 0 .707z" />
                                                        </svg>
                                                    </button>
                                                </div>
                                                <div class="card-body" style="background-color: #f8f9fa;">
                                                    <div id="multipleChartsContainer" class="chart-grid">
                                                        <div class="text-center text-muted">
                                                            <p>Upload signal files and click "Plot All Charts" to view
                                                                them</p>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Prediction details modal -->
    <div class="modal fade" id="predictionDetailsModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Prediction Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <pre id="predictionDetailsContent" class="bg-light p-3 rounded"></pre>
                </div>
            </div>
        </div>
    </div>

    <!-- URLs configuration modal -->
    <div class="modal fade" id="configModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Model Configuration</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="modelConfigContainer">
                        <!-- Model configuration will be loaded here dynamically -->
                        <div class="text-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>    <!-- File preview modal -->
    <div class="modal fade" id="filePreviewModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="filePreviewTitle">File Preview</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <ul class="nav nav-tabs mb-3" id="filePreviewTabs" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link active" id="graph-tab" data-bs-toggle="tab"
                                data-bs-target="#graph-view" type="button" role="tab" aria-controls="graph-view"
                                aria-selected="true">Graph</button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="raw-tab" data-bs-toggle="tab" data-bs-target="#raw-view"
                                type="button" role="tab" aria-controls="raw-view" aria-selected="false">Raw
                                Text</button>
                        </li>
                    </ul>
                    <div class="tab-content" id="filePreviewTabContent">
                        <div class="tab-pane fade show active" id="graph-view" role="tabpanel"
                            aria-labelledby="graph-tab">
                            <div class="chart-container" style="position: relative; height:400px;">
                                <canvas id="signalChart"></canvas>
                            </div>
                        </div>
                        <div class="tab-pane fade" id="raw-view" role="tabpanel" aria-labelledby="raw-tab">
                            < id="filePreviewContent" class="bg-light p-3 rounded"
                                style="max-height: 400px; overflow: auto;"></pre>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Multiple Discharges Configuration Modal -->
    <div class="modal fade" id="multipleDischargesModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Multiple Discharges</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-info">
                        <strong>Instructions:</strong> This feature allows you to upload multiple files and automatically group them into discharges based on patterns in the filenames. Files that belong to the same discharge should have similar names.
                    </div>

                    <!-- Step 1: File Upload -->
                    <div class="mb-4">
                        <h6>Step 1: Select Files</h6>
                        <div class="mb-3">
                            <label for="multipleDischargeFiles" class="form-label">Select signal files (.txt):</label>
                            <input type="file" class="form-control" id="multipleDischargeFiles" 
                                   multiple accept=".txt">
                            <div class="form-text">Select all the .txt files you want to upload. They will be grouped automatically.</div>
                        </div>
                        <div id="multipleDischargeFilesPreview" class="mb-3" style="display: none;">
                            <div class="border rounded p-3 bg-light">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <strong>Files Selected:</strong>
                                    <span id="multipleDischargeFilesCount" class="file-count-preview">0 files</span>
                                </div>
                                <div id="multipleDischargeFilesList" style="max-height: 150px; overflow-y: auto;">
                                    <!-- File list will be populated here -->
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Step 2: Grouping Pattern -->
                    <div class="mb-4">
                        <h6>Step 2: Discharge Grouping Pattern</h6>
                        <div class="mb-3">
                            <label for="dischargePattern" class="form-label">Pattern to group files into discharges:</label>
                            <input type="text" class="form-control multiple-discharge-pattern-input" 
                                   id="dischargePattern" placeholder="DES_(\d+)" value="DES_(\d+)">
                            <div class="form-text">
                                Use a regular expression to capture the discharge ID from filenames. The capture group (parentheses) should contain the discharge identifier.
                            </div>
                            <div class="pattern-example">
                                <strong>Examples:</strong><br>
                                • <code>DES_(\d+)</code> - matches "DES_123", "DES_456", etc.<br>
                                • <code>discharge_(\d+)</code> - matches "discharge_001", "discharge_002", etc.<br>
                                • <code>exp_([A-Z]+\d+)</code> - matches "exp_A123", "exp_B456", etc.
                            </div>
                        </div>
                    </div>

                    <!-- Step 3: Exclusion Pattern -->
                    <div class="mb-4">
                        <h6>Step 3: File Exclusion Pattern (Optional)</h6>
                        <div class="mb-3">
                            <label for="exclusionPattern" class="form-label">Pattern to exclude files:</label>
                            <input type="text" class="form-control multiple-discharge-pattern-input" 
                                   id="exclusionPattern" placeholder=".*_backup\.|.*\.temp">
                            <div class="form-text">
                                Optional regular expression to exclude certain files. Leave empty to include all files.
                            </div>
                            <div class="pattern-example">
                                <strong>Examples:</strong><br>
                                • <code>.*_backup\.</code> - excludes files with "_backup." in the name<br>
                                • <code>.*\.temp$</code> - excludes files ending with ".temp"<br>
                                • <code>.*(backup|temp|old).*</code> - excludes files containing "backup", "temp", or "old"
                            </div>
                        </div>
                    </div>

                    <!-- Step 4: Pattern Test -->
                    <div class="mb-4">
                        <h6>Step 4: Test Patterns</h6>
                        <button id="testPatternsBtn" class="btn btn-outline-primary" disabled>
                            Test Patterns
                        </button>
                        <div id="patternTestResults" class="mt-3" style="display: none;">
                            <!-- Pattern test results will be shown here -->
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-success" id="processMultipleDischargesBtn" disabled>
                        Create Discharges
                    </button>
                </div>
            </div>
        </div>
    </div><!-- Fullscreen Chart Modal -->
    <div id="fullscreenModal" class="fullscreen-modal">
        <div class="fullscreen-modal-header">
            <div class="fullscreen-modal-title" id="fullscreenChartTitle">Chart Fullscreen View</div>
            <button class="fullscreen-close-btn" onclick="closeFullscreenChart()">Close</button>
        </div>
        <div class="fullscreen-chart-container">
            <!-- Single chart container -->
            <div id="fullscreenSingleChart" class="fullscreen-single-chart" style="display: none;">
                <canvas id="fullscreenChart"></canvas>
            </div>
            <!-- Multiple charts container -->
            <div id="fullscreenMultipleCharts" class="fullscreen-multiple-charts" style="display: none;">
                <!-- Multiple charts will be added here dynamically -->
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        // Connect to the Socket.io server
        const socket = io();
        let predictionHistory = [];
        let predictionDetailsModal;
        let configModal;
        let filePreviewModal;        // Manage signal files for prediction
        let sensorFiles = [];
        // Array of training downloads. Each download has: id, files[], anomalyTime
        let discharges = [];
        let dischargeCounter = 0;
        let modelDisplayNames = {};
        
        // Multiple discharges modal variables
        let multipleDischargesModal;
        let selectedMultipleFiles = [];
        let multipleDischargePatternResults = null;

        function formatDate(date) {
            const d = new Date(date);
            return d.toLocaleString();
        }

        function renderModel(name, status) {
            const statusClass = {
                'online': 'status-online',
                'offline': 'status-offline',
                'disabled': 'status-disabled',
                'unknown': 'status-unknown'
            }[status.status] || 'status-unknown';

            const statusText = {
                'online': 'Online',
                'offline': 'Offline',
                'disabled': 'Disabled',
                'unknown': 'Unknown'
            }[status.status] || 'Unknown';

            const lastCheck = status.lastCheck ? formatDate(status.lastCheck) : 'Never';

            const displayName = modelDisplayNames[name] || name;

            return `
                <div class="model-col" id="model-col-${name}">
                    <div class="card model-card" id="model-card-${name}">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-start">
                                <h5 class="card-title m-0">
                                    <span class="editable-name" data-model="${name}" contenteditable="true">${displayName}</span>
                                </h5>
                                <span class="delete-model" data-model="${name}" style="cursor:pointer" title="Delete">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x-circle" viewBox="0 0 16 16">
                                        <path d="M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14zm3.354-9.354a.5.5 0 1 1 .708.708L8.707 8l3.355 3.354a.5.5 0 0 1-.708.708L8 8.707l-3.354 3.355a.5.5 0 1 1-.708-.708L7.293 8 3.939 4.646a.5.5 0 1 1 .708-.708L8 7.293l3.354-3.647z"/>
                                    </svg>
                                </span>
                            </div>
                            <p class="model-status ${statusClass}">${statusText}</p>
                            <p class="card-text">
                                <small class="text-muted model-lastcheck">Last check: ${lastCheck}</small>
                            </p>
                            <div class="form-check form-switch">
                                <input class="form-check-input model-toggle" type="checkbox"
                                    id="toggle-${name}"
                                    data-model="${name}"
                                    ${status.status !== 'disabled' ? 'checked' : ''}>
                                <label class="form-check-label" for="toggle-${name}">Enabled</label>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }

        // Render prediction history
        function renderPredictionHistory() {
            if (predictionHistory.length === 0) {
                document.getElementById('noPredictionsMsg').style.display = 'block';
                document.getElementById('predictionHistory').innerHTML = `
                    <div class="text-center text-muted" id="noPredictionsMsg">
                        No predictions recorded
                    </div>`;
                return;
            }

            const historyHtml = predictionHistory.map((prediction, index) => {
                const predClass = prediction.result !== null ? prediction.result : 'undefined';
                const confidenceWidth = prediction.confidence ? (prediction.confidence * 100) : 0;

                return `
                    <div class="prediction-item prediction-class-${predClass}" 
                         data-index="${index}" 
                         onclick="showPredictionDetails(${index})">
                        <div class="d-flex justify-content-between">
                            <strong>Clase: ${predClass !== 'undefined' ? predClass : 'Undefined'}</strong>
                            <span class="timestamp">${formatDate(prediction.timestamp)}</span>
                        </div>
                        
                        <div class="confidence-bar">
                            <div class="confidence-value" style="width: ${confidenceWidth}%"></div>
                        </div>
                        
                        <div class="d-flex justify-content-between mt-2">
                            <small>Confianza: ${(prediction.confidence * 100).toFixed(1)}%</small>
                            <small>Votos: ${JSON.stringify(prediction.votes)}</small>
                        </div>
                    </div>
                `;
            }).join('');

            document.getElementById('predictionHistory').innerHTML = historyHtml;
        }

        function renderSensorFiles() {
            const container = document.getElementById('sensorFilesContainer');

            if (sensorFiles.length === 0) {
                container.innerHTML = `
                    <div class="text-center text-muted py-3">
                        No sensor files loaded
                    </div>
                `;
                document.getElementById('processSensorFilesBtn').disabled = true;
                return;
            }

            let html = '';
            sensorFiles.forEach((file, index) => {
                const previewLines = file.content.split('\n').slice(0, 3).join('\n');

                html += `
                    <div class="sensor-file-item">
                        <div class="d-flex justify-content-between">
                            <h6>${file.name}</h6>
                            <div class="btn-group btn-group-sm">
                                <button class="btn btn-outline-secondary btn-preview" data-index="${index}">
                                    Preview
                                </button>
                                <button class="btn btn-outline-danger btn-remove" data-index="${index}">
                                    Delete
                                </button>
                            </div>
                        </div>
                        <div class="sensor-preview text-muted">${previewLines}...</div>
                    </div>
                `;
            });

            container.innerHTML = html;
            document.getElementById('processSensorFilesBtn').disabled = false;

            container.querySelectorAll('.btn-preview').forEach(btn => {
                btn.addEventListener('click', function () {
                    const index = parseInt(this.dataset.index);
                    showFilePreview(sensorFiles[index].name, sensorFiles[index].content);
                });
            });

            container.querySelectorAll('.btn-remove').forEach(btn => {
                btn.addEventListener('click', function () {
                    const index = parseInt(this.dataset.index);
                    sensorFiles.splice(index, 1);
                    renderSensorFiles();
                });
            });
        }

        // Function to add a new discharge
        function addDischarge() {
            const dischargeId = dischargeCounter++;
            const discharge = {
                id: dischargeId,
                files: [],
                anomalyTime: null
            };

            discharges.push(discharge);
            renderDischarges();
            return dischargeId;
        }

        // Function to remove a discharge
        function removeDischarge(dischargeId) {
            const index = discharges.findIndex(d => d.id === dischargeId);
            if (index !== -1) {
                discharges.splice(index, 1);
                renderDischarges();
                updateJsonPreview();
            }
        }

        function renderDischarges() {
            const container = document.getElementById('dischargesContainer');

            // If there are no discharges, show a message and disable the button
            if (discharges.length === 0) {
                container.innerHTML = `
                    <div class="text-center text-muted py-3" id="noDischargesMsg">
                        No discharges added
                    </div>
                `;
                document.getElementById('processDischargesBtn').disabled = true;
                return;
            }

            // If there are discharges, enable button
            document.getElementById('processDischargesBtn').disabled = false;

            let html = '';
            discharges.forEach((discharge) => {
                const filesCount = discharge.files.length;

                html += `
                    <div class="discharge-item" id="discharge-${discharge.id}">
                        <div class="discharge-header">
                            <h5>Discharge #${discharge.id + 1}</h5>
                            <div class="btn-group btn-group-sm">
                                <button class="btn btn-outline-danger remove-discharge-btn" data-discharge-id="${discharge.id}">
                                    Remove Discharge
                                </button>
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Signal files (.txt):</label>
                            <input type="file" class="form-control discharge-files-input" 
                                    multiple accept=".txt" data-discharge-id="${discharge.id}">
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Anomaly time (for all files):</label>
                            <input type="number" class="form-control anomaly-time-input" 
                                   step="0.0001" placeholder="Ej: 41.0562" data-discharge-id="${discharge.id}"
                                   value="${discharge.anomalyTime !== null ? discharge.anomalyTime : ''}">
                            <div class="form-text">
                                This time will be applied to all files in this download.
                                It can be left blank if there is no known anomaly.
                            </div>
                        </div>
                        
                        <div class="discharge-files-section mt-4">
                            <h6>Files (${filesCount})</h6>
                            <div class="discharge-files list-group">
                                ${renderDischargeFiles(discharge)}
                            </div>
                        </div>
                    </div>
                `;
            });

            container.innerHTML = html;

            // Add event listeners to the new elements
            container.querySelectorAll('.remove-discharge-btn').forEach(btn => {
                btn.addEventListener('click', function () {
                    const dischargeId = parseInt(this.getAttribute('data-discharge-id'));
                    removeDischarge(dischargeId);
                });
            });

            container.querySelectorAll('.discharge-files-input').forEach(input => {
                input.addEventListener('change', async function (e) {
                    const dischargeId = parseInt(this.getAttribute('data-discharge-id'));
                    const dischargeIndex = discharges.findIndex(d => d.id === dischargeId);

                    if (dischargeIndex !== -1 && e.target.files.length > 0) {
                        for (const file of e.target.files) {
                            try {
                                const content = await readFileAsText(file);
                                discharges[dischargeIndex].files.push({
                                    name: file.name,
                                    content
                                });
                            } catch (error) {
                                alert(`Error at reading file ${file.name}: ${error.message}`);
                            }
                        }

                        renderDischarges();
                        updateJsonPreview();
                        e.target.value = ''; // Reset the input to allow loading the same files again
                    }
                });
            });

            container.querySelectorAll('.anomaly-time-input').forEach(input => {
                input.addEventListener('change', function () {
                    const dischargeId = parseInt(this.getAttribute('data-discharge-id'));
                    const dischargeIndex = discharges.findIndex(d => d.id === dischargeId);

                    if (dischargeIndex !== -1) {
                        const value = this.value.trim();
                        discharges[dischargeIndex].anomalyTime = value ? parseFloat(value) : null;
                        updateJsonPreview();
                    }
                });
            });

            container.querySelectorAll('.preview-file-btn').forEach(btn => {
                btn.addEventListener('click', function () {
                    const dischargeId = parseInt(this.getAttribute('data-discharge-id'));
                    const fileIndex = parseInt(this.getAttribute('data-file-index'));
                    const dischargeIndex = discharges.findIndex(d => d.id === dischargeId);

                    if (dischargeIndex !== -1 && discharges[dischargeIndex].files[fileIndex]) {
                        const file = discharges[dischargeIndex].files[fileIndex];
                        showFilePreview(file.name, file.content);
                    }
                });
            });

            container.querySelectorAll('.remove-file-btn').forEach(btn => {
                btn.addEventListener('click', function () {
                    const dischargeId = parseInt(this.getAttribute('data-discharge-id'));
                    const fileIndex = parseInt(this.getAttribute('data-file-index'));
                    const dischargeIndex = discharges.findIndex(d => d.id === dischargeId);

                    if (dischargeIndex !== -1 && fileIndex !== -1) {
                        discharges[dischargeIndex].files.splice(fileIndex, 1);
                        renderDischarges();
                        updateJsonPreview();
                    }
                });
            });
        }

        // Render specific discharge files
        function renderDischargeFiles(discharge) {
            if (discharge.files.length === 0) {
                return '<div class="text-center text-muted py-3">No files added</div>';
            }

            let html = '';
            discharge.files.forEach((file, fileIndex) => {
                html += `
                    <div class="discharge-file-item list-group-item">
                        <div class="d-flex justify-content-between align-items-center w-100">
                            <div class="text-truncate me-3">${file.name}</div>
                            <div class="btn-group btn-group-sm ms-auto">
                                <button class="btn btn-sm btn-outline-secondary preview-file-btn" 
                                        data-discharge-id="${discharge.id}" 
                                        data-file-index="${fileIndex}">
                                    Preview
                                </button>
                                <button class="btn btn-sm btn-outline-danger remove-file-btn"
                                        data-discharge-id="${discharge.id}" 
                                        data-file-index="${fileIndex}">
                                    Remove
                                </button>
                            </div>
                        </div>
                    </div>
                `;
            });

            return html;
        }

        // Function to generate the JSON preview
        function updateJsonPreview() {
            if (discharges.length === 0) {
                document.getElementById('jsonPreview').textContent = 'There is no data to show';
                return;
            }

            // Create data structure for the preview with optimized format
            const previewData = { discharges: [] };

            // Process each discharge
            discharges.forEach(discharge => {
                if (discharge.files.length === 0) {
                    return; // Skip discharges without files
                }

                let dischargeId = `discharge_${discharge.id + 1}`;

                // Try to extract the identifier from the file name
                if (discharge.files.length > 0) {
                    const fileName = discharge.files[0].name;
                    const match = fileName.match(/DES_(\d+)/i);
                    if (match && match[1]) {
                        dischargeId = match[1];
                    }
                }

                const dischargeData = {
                    id: dischargeId,
                    signals: []
                };

                // Add anomaly time if defined
                if (discharge.anomalyTime !== null) {
                    dischargeData.anomalyTime = discharge.anomalyTime;
                }

                // Check if all files have the same times
                let commonTimes = [];
                let allSameTime = true;
                let firstFileTimes = null;

                // Take the first 5 lines for the preview
                discharge.files.forEach((file, index) => {
                    const lines = file.content.trim().split('\n');
                    const previewLines = Math.min(5, lines.length);
                    const times = [];

                    for (let i = 0; i < previewLines; i++) {
                        const parts = lines[i].trim().split(/\s+/);
                        if (parts.length >= 2) {
                            times.push(parseFloat(parts[0]));
                        }
                    }

                    if (index === 0) {
                        firstFileTimes = times;
                    } else if (JSON.stringify(times) !== JSON.stringify(firstFileTimes)) {
                        allSameTime = false;
                    }
                });

                if (allSameTime && firstFileTimes) {
                    dischargeData.times = firstFileTimes;
                    const totalLines = discharge.files[0].content.trim().split('\n').length;
                    dischargeData.length = totalLines;
                    if (totalLines > 5) {
                        dischargeData._previewNote = `... displaying 5 of ${totalLines} lines`;
                    }
                }

                // Process each file
                discharge.files.forEach(file => {
                    try {
                        const lines = file.content.trim().split('\n');
                        const previewLines = Math.min(5, lines.length);
                        const times = [];
                        const values = [];

                        for (let i = 0; i < previewLines; i++) {
                            const line = lines[i].trim();
                            const parts = line.split(/\s+/);
                            if (parts.length >= 2) {
                                if (!allSameTime) {
                                    times.push(parseFloat(parts[0]));
                                }
                                values.push(parseFloat(parts[1]));
                            }
                        }

                        const sensorData = {
                            fileName: file.name,
                            values: values
                        };

                        // Solo incluimos tiempos si no son comunes
                        if (!allSameTime) {
                            sensorData.times = times;
                            const totalLines = file.content.trim().split('\n').length;
                            sensorData.length = totalLines;
                            if (totalLines > 5) {
                                sensorData._previewNote = `... showing 5 of ${totalLines} lines`;
                            }
                        }

                        dischargeData.signals.push(sensorData);
                    } catch (error) {
                        console.error(`Error processing file ${file.name}:`, error);
                    }
                });

                previewData.discharges.push(dischargeData);
            });            // Format the JSON for display
            document.getElementById('jsonPreview').textContent = JSON.stringify(previewData, null, 2);
        }

        // Multiple Discharges Functions
        function showMultipleDischargesModal() {
            multipleDischargesModal.show();
        }

        function handleMultipleDischargeFilesChange(event) {
            const files = Array.from(event.target.files);
            selectedMultipleFiles = [];
            
            if (files.length === 0) {
                document.getElementById('multipleDischargeFilesPreview').style.display = 'none';
                document.getElementById('testPatternsBtn').disabled = true;
                document.getElementById('processMultipleDischargesBtn').disabled = true;
                return;
            }

            // Read all files
            Promise.all(files.map(file => {
                return readFileAsText(file).then(content => ({
                    name: file.name,
                    content: content,
                    file: file
                }));
            })).then(filesData => {
                selectedMultipleFiles = filesData;
                updateMultipleDischargeFilesPreview();
                document.getElementById('testPatternsBtn').disabled = false;
            }).catch(error => {
                alert(`Error reading files: ${error.message}`);
            });
        }

        function updateMultipleDischargeFilesPreview() {
            const preview = document.getElementById('multipleDischargeFilesPreview');
            const count = document.getElementById('multipleDischargeFilesCount');
            const list = document.getElementById('multipleDischargeFilesList');

            count.textContent = `${selectedMultipleFiles.length} files`;
            
            const listHtml = selectedMultipleFiles.map(file => 
                `<div class="small text-muted mb-1">${file.name}</div>`
            ).join('');
            
            list.innerHTML = listHtml;
            preview.style.display = 'block';
        }

        function testMultipleDischargePatterns() {
            const dischargePattern = document.getElementById('dischargePattern').value.trim();
            const exclusionPattern = document.getElementById('exclusionPattern').value.trim();
            
            if (!dischargePattern) {
                alert('Please enter a discharge grouping pattern.');
                return;
            }

            try {
                const dischargeRegex = new RegExp(dischargePattern, 'i');
                const exclusionRegex = exclusionPattern ? new RegExp(exclusionPattern, 'i') : null;
                
                const results = {
                    groups: {},
                    excluded: [],
                    ungrouped: []
                };

                selectedMultipleFiles.forEach(file => {
                    // Check if file should be excluded
                    if (exclusionRegex && exclusionRegex.test(file.name)) {
                        results.excluded.push(file.name);
                        return;
                    }

                    // Try to match discharge pattern
                    const match = file.name.match(dischargeRegex);
                    if (match && match[1]) {
                        const dischargeId = match[1];
                        if (!results.groups[dischargeId]) {
                            results.groups[dischargeId] = [];
                        }
                        results.groups[dischargeId].push(file.name);
                    } else {
                        results.ungrouped.push(file.name);
                    }
                });

                multipleDischargePatternResults = results;
                displayPatternTestResults(results);
                
                // Enable process button if there are valid groups
                const hasValidGroups = Object.keys(results.groups).length > 0;
                document.getElementById('processMultipleDischargesBtn').disabled = !hasValidGroups;

            } catch (error) {
                alert(`Invalid pattern: ${error.message}`);
            }
        }

        function displayPatternTestResults(results) {
            const container = document.getElementById('patternTestResults');
            
            let html = '<div class="border rounded p-3 bg-light">';
            
            // Show grouped discharges
            const groupCount = Object.keys(results.groups).length;
            if (groupCount > 0) {
                html += `<div class="mb-3"><strong class="text-success">✓ Found ${groupCount} discharge group(s):</strong></div>`;
                
                Object.entries(results.groups).forEach(([dischargeId, files]) => {
                    html += `
                        <div class="mb-2">
                            <div class="fw-bold text-primary">Discharge ${dischargeId} (${files.length} files):</div>
                            <div class="ms-3">
                                ${files.map(fileName => `<div class="small text-muted">• ${fileName}</div>`).join('')}
                            </div>
                        </div>
                    `;
                });
            } else {
                html += '<div class="mb-3"><strong class="text-danger">✗ No discharge groups found with current pattern</strong></div>';
            }

            // Show excluded files
            if (results.excluded.length > 0) {
                html += `<div class="mb-3"><strong class="text-warning">Excluded ${results.excluded.length} file(s):</strong></div>`;
                html += '<div class="ms-3">';
                results.excluded.forEach(fileName => {
                    html += `<div class="small text-muted">• ${fileName}</div>`;
                });
                html += '</div>';
            }

            // Show ungrouped files
            if (results.ungrouped.length > 0) {
                html += `<div class="mb-3"><strong class="text-warning">Ungrouped ${results.ungrouped.length} file(s):</strong></div>`;
                html += '<div class="ms-3">';
                results.ungrouped.forEach(fileName => {
                    html += `<div class="small text-muted">• ${fileName}</div>`;
                });
                html += '</div>';
            }

            html += '</div>';
            
            container.innerHTML = html;
            container.style.display = 'block';
        }

        function processMultipleDischarges() {
            if (!multipleDischargePatternResults || Object.keys(multipleDischargePatternResults.groups).length === 0) {
                alert('No valid discharge groups found. Please test your patterns first.');
                return;
            }

            const results = multipleDischargePatternResults;
            let createdCount = 0;

            // Create discharges for each group
            Object.entries(results.groups).forEach(([dischargeId, fileNames]) => {
                const discharge = {
                    id: dischargeCounter++,
                    files: [],
                    anomalyTime: null
                };

                // Add files to the discharge
                fileNames.forEach(fileName => {
                    const fileData = selectedMultipleFiles.find(f => f.name === fileName);
                    if (fileData) {
                        discharge.files.push({
                            name: fileData.name,
                            content: fileData.content
                        });
                    }
                });

                if (discharge.files.length > 0) {
                    discharges.push(discharge);
                    createdCount++;
                }
            });

            // Refresh the discharges display
            renderDischarges();
            updateJsonPreview();

            // Close modal and show success message
            multipleDischargesModal.hide();
            
            alert(`Successfully created ${createdCount} discharge(s) with ${Object.values(results.groups).flat().length} files total.`);

            // Reset the modal
            resetMultipleDischargesModal();
        }

        function resetMultipleDischargesModal() {
            document.getElementById('multipleDischargeFiles').value = '';
            selectedMultipleFiles = [];
            multipleDischargePatternResults = null;
            document.getElementById('multipleDischargeFilesPreview').style.display = 'none';
            document.getElementById('patternTestResults').style.display = 'none';
            document.getElementById('testPatternsBtn').disabled = true;
            document.getElementById('processMultipleDischargesBtn').disabled = true;
        }

        // Process signal files to create the appropriate JSON format
        function processSignalFiles(files) {
            try {
                // Group files by discharge (extract discharge ID from the file name)
                const dischargeGroups = {};

                files.forEach(file => {
                    // Attempt to extract discharge ID from the file name
                    let dischargeId = "unknown";
                    const match = file.name.match(/DES_(\d+)/i);
                    if (match && match[1]) {
                        dischargeId = match[1];
                    }

                    // Create group if it doesn't exist
                    if (!dischargeGroups[dischargeId]) {
                        dischargeGroups[dischargeId] = {
                            id: dischargeId,
                            files: [],
                            commonTimes: null
                        };
                    }

                    dischargeGroups[dischargeId].files.push(file);
                });

                const discharges = [];

                Object.values(dischargeGroups).forEach(group => {
                    let allSameTime = true;
                    let firstFileTimes = null;

                    group.files.forEach((file, index) => {
                        const lines = file.content.trim().split('\n');
                        const times = [];

                        for (const line of lines) {
                            const parts = line.trim().split(/\s+/);
                            if (parts.length >= 2) {
                                const time = parseFloat(parts[0]);
                                if (!isNaN(time)) {
                                    times.push(time);
                                }
                            }
                        }

                        if (index === 0) {
                            firstFileTimes = times;
                        } else if (JSON.stringify(times) !== JSON.stringify(firstFileTimes)) {
                            allSameTime = false;
                        }
                    });

                    const discharge = {
                        id: group.id,
                        signals: []
                    };

                    if (allSameTime && firstFileTimes && firstFileTimes.length > 0) {
                        discharge.times = firstFileTimes;
                        discharge.length = firstFileTimes.length;
                    }

                    group.files.forEach(file => {
                        const lines = file.content.trim().split('\n');
                        const values = [];
                        const times = [];

                        for (const line of lines) {
                            const parts = line.trim().split(/\s+/);
                            if (parts.length >= 2) {
                                if (!allSameTime) {
                                    times.push(parseFloat(parts[0]));
                                }
                                values.push(parseFloat(parts[1]));
                            }
                        }

                        const sensorData = {
                            fileName: file.name,
                            values: values
                        };

                        // If times are not common, include them in the sensor data
                        if (!allSameTime) {
                            sensorData.times = times;
                            sensorData.length = times.length;
                        }

                        discharge.signals.push(sensorData);
                    });

                    discharges.push(discharge);
                });

                return { discharges };

            } catch (error) {
                throw new Error(`Error processing file: ${error.message}`);
            }
        }

        // Process each discharge for training
        function processDischargesForTraining() {
            try {
                if (discharges.length === 0) {
                    throw new Error('No discharges to process');
                }

                const trainingData = { discharges: [] };

                // Process each discharge as an independent discharge
                discharges.forEach(discharge => {
                    // Check if there are files
                    if (discharge.files.length === 0) {
                        console.warn(`Discharge #${discharge.id + 1} has no files`);
                        return;
                    }

                    // Extract the discharge identifier from the file name if possible
                    let dischargeId = `discharge_${discharge.id + 1}`;

                    // Attempt to extract the identifier from the file name
                    // Expected format: DES_XXXXX_YY where XXXXX is the discharge ID
                    if (discharge.files.length > 0) {
                        const fileName = discharge.files[0].name;
                        const match = fileName.match(/DES_(\d+)/i);
                        if (match && match[1]) {
                            dischargeId = match[1];
                        }
                    }

                    const dischargeData = {
                        id: dischargeId,
                        signals: []
                    };

                    if (discharge.anomalyTime !== null) {
                        dischargeData.anomalyTime = discharge.anomalyTime;
                    }

                    let commonTimes = null;
                    let firstFileTimes = null;
                    let allSameTime = true;
                    const values = [];

                    // Process first all times to check if they are common
                    discharge.files.forEach((file, index) => {
                        const lines = file.content.trim().split('\n');
                        const times = [];

                        for (const line of lines) {
                            const parts = line.trim().split(/\s+/);
                            if (parts.length >= 2) {
                                const time = parseFloat(parts[0]);
                                const value = parseFloat(parts[1]);

                                if (!isNaN(time) && !isNaN(value)) {
                                    times.push(time);
                                }
                            }
                        }

                        if (index === 0) {
                            firstFileTimes = times;
                        } else if (JSON.stringify(times) !== JSON.stringify(firstFileTimes)) {
                            allSameTime = false;
                        }
                    });

                    if (allSameTime && firstFileTimes) {
                        dischargeData.times = firstFileTimes;
                        dischargeData.length = firstFileTimes.length;
                    }

                    // Process values of each file
                    discharge.files.forEach(file => {
                        try {
                            const lines = file.content.trim().split('\n');
                            const values = [];
                            let fileTimes = [];

                            for (const line of lines) {
                                const parts = line.trim().split(/\s+/);
                                if (parts.length >= 2) {
                                    const time = parseFloat(parts[0]);
                                    const value = parseFloat(parts[1]);

                                    if (!isNaN(time) && !isNaN(value)) {
                                        // If we don't have common times, store the times per file
                                        if (!allSameTime) {
                                            fileTimes.push(time);
                                        }
                                        values.push(value);
                                    }
                                }
                            }

                            const sensorData = {
                                fileName: file.name,
                                values: values
                            };

                            // If there are no common times, include the specific times of the file
                            if (!allSameTime) {
                                sensorData.times = fileTimes;
                                sensorData.length = fileTimes.length;
                            }

                            dischargeData.signals.push(sensorData);

                        } catch (error) {
                            throw new Error(`Error al procesar el archivo ${file.name}: ${error.message}`);
                        }
                    });

                    trainingData.discharges.push(dischargeData);
                });

                // Verificar si se procesó algún descarga
                if (trainingData.discharges.length === 0) {
                    throw new Error('No hay archivos válidos para entrenar');
                }

                return trainingData;

            } catch (error) {
                throw error;
            }
        }

        function renderModelConfig(models) {
            const configContainer = document.getElementById('modelConfigContainer');
            let html = '';

            models.forEach(model => {
                html += `
                    <div class="card mb-3">
                        <div class="card-header">
                            <h5 class="mb-0">${(model.displayName || model.name).toUpperCase()}</h5>
                        </div>
                        <div class="card-body">
                            <div class="form-check form-switch mb-3">
                                <input class="form-check-input model-toggle" type="checkbox" 
                                    id="config-toggle-${model.name}" 
                                    data-model="${model.name}" 
                                    ${model.enabled ? 'checked' : ''}>
                                <label class="form-check-label" for="config-toggle-${model.name}">Enabled</label>
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label">Prediction URL:</label>
                                <div class="input-group">
                                    <input type="text" class="form-control model-url" 
                                        data-model="${model.name}"
                                        data-type="predict"
                                        value="${model.url}">
                                    <button class="btn btn-outline-primary update-url-btn" 
                                        data-model="${model.name}"
                                        data-type="predict">Update</button>
                                </div>
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label">Training URL:</label>
                                <div class="input-group">
                                    <input type="text" class="form-control model-url" 
                                        data-model="${model.name}"
                                        data-type="train"
                                        value="${model.trainingUrl}">
                                    <button class="btn btn-outline-primary update-url-btn" 
                                        data-model="${model.name}"
                                        data-type="train">Update</button>
                                </div>
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label">Health Check URL:</label>
                                <div class="input-group">
                                    <input type="text" class="form-control model-url" 
                                        data-model="${model.name}"
                                        data-type="health"
                                        value="${model.healthUrl}">
                                    <button class="btn btn-outline-primary update-url-btn" 
                                        data-model="${model.name}"
                                        data-type="health">Update</button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            });

            configContainer.innerHTML = html;

            document.querySelectorAll('#modelConfigContainer .model-toggle').forEach(toggle => {
                toggle.addEventListener('change', function () {
                    const modelName = this.dataset.model;
                    const enabled = this.checked;

                    socket.emit('toggle-model', { modelName, enabled });
                });
            });

            document.querySelectorAll('#modelConfigContainer .update-url-btn').forEach(btn => {
                btn.addEventListener('click', function () {
                    const modelName = this.dataset.model;
                    const type = this.dataset.type;
                    const urlInput = document.querySelector(`.model-url[data-model="${modelName}"][data-type="${type}"]`);

                    updateModelUrl(modelName, urlInput.value, type);
                });
            });
        }

        // Actualizar URL de un modelo
        function updateModelUrl(modelName, url, type) {
            fetch('/api/config/url', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ modelName, url, type })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.error) {
                        alert('Error: ' + data.error);
                    } else {
                        renderModelConfig(data.models);
                    }
                })
                .catch(error => {
                    alert('Error at updating URL: ' + error.message);
                });
        }

        function readFileAsText(file) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onload = event => resolve(event.target.result);
                reader.onerror = error => reject(error);
                reader.readAsText(file);
            });
        }

        window.showPredictionDetails = function (index) {
            const prediction = predictionHistory[index];
            if (prediction) {
                document.getElementById('predictionDetailsContent').textContent =
                    JSON.stringify(prediction.details, null, 2);
                predictionDetailsModal.show();
            }
        };

        // File preview with graph visualization
        function showFilePreview(fileName, content, anomalyTime = null) {
            // Store reference to any existing chart to destroy it
            let chartInstance = window.signalChartInstance;
            if (chartInstance) {
                chartInstance.destroy();
            }

            document.getElementById('filePreviewTitle').textContent = fileName;
            document.getElementById('filePreviewContent').textContent = content;

            // Parse the content
            const lines = content.trim().split('\n');
            const times = [];
            const values = [];

            lines.forEach(line => {
                const parts = line.trim().split(/\s+/);
                if (parts.length >= 2) {
                    const time = parseFloat(parts[0]);
                    const value = parseFloat(parts[1]);
                    if (!isNaN(time) && !isNaN(value)) {
                        times.push(time);
                        values.push(value);
                    }
                }
            });

            // Create the chart
            const ctx = document.getElementById('signalChart').getContext('2d');
            window.signalChartInstance = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: times,
                    datasets: [{
                        label: fileName,
                        data: values,
                        borderColor: 'rgb(75, 192, 192)',
                        borderWidth: 1,
                        pointRadius: 0,
                        tension: 0.1,
                        parsing: {
                            xAxisKey: 'time',
                            yAxisKey: 'value'
                        }
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        x: {
                            type: 'linear',
                            title: {
                                display: true,
                                text: 'Time'
                            }
                        },
                        y: {
                            title: {
                                display: true,
                                text: 'Signal Value'
                            }
                        }
                    },
                    plugins: {
                        tooltip: {
                            mode: 'index',
                            intersect: false,
                        }
                    }
                }
            });

            // Show the modal
            filePreviewModal.show();
        }

        function parseDisruptionTimesFile(content) {
            const lines = content.trim().split('\n');
            const disruptions = {};

            lines.forEach(line => {
                const parts = line.trim().split(/\s+/);
                if (parts.length >= 2) {
                    const dischargeId = parts[0].trim();
                    const anomalyTime = parseFloat(parts[1].trim());

                    // Only store times that are not 0 (disruptive)
                    if (!isNaN(anomalyTime) && anomalyTime > 0) {
                        disruptions[dischargeId] = anomalyTime;
                    }
                }
            });

            return disruptions;
        }

        function applyDisruptionTimesToDischarges(disruptions) {
            let appliedCount = 0;

            discharges.forEach(discharge => {
                if (discharge.files.length === 0) return;

                const firstFileName = discharge.files[0].name;
                const match = firstFileName.match(/DES_(\d+)/i);

                if (match && match[1]) {
                    const dischargeId = match[1];

                    // If there is a disruption time for this ID, apply it
                    if (disruptions[dischargeId]) {
                        discharge.anomalyTime = disruptions[dischargeId];

                        // Update UI input
                        const inputElem = document.querySelector(`.anomaly-time-input[data-discharge-id="${discharge.id}"]`);
                        if (inputElem) {
                            inputElem.value = disruptions[dischargeId];
                        }

                        appliedCount++;
                    }
                }
            });

            return appliedCount;
        }        // Socket event listeners
        let currentModelStatus = {};
        socket.on('health-update', function(modelStatus) {
            currentModelStatus = modelStatus;
            const container = document.getElementById('modelsContainer');
            const cards = container.querySelectorAll('.model-col').length;
            if (cards !== Object.keys(modelStatus).length) {
                renderModels(modelStatus);
            } else {
                updateModelStatuses(modelStatus);
            }
        });

        socket.on('prediction-result', function(result) {
            document.getElementById('predictionResultContainer').style.display = 'block';
            if (result.error) {
                document.getElementById('predictionResult').className = 'alert alert-danger';
                document.getElementById('predictionResult').innerHTML = `Error: ${result.error}`;
            } else {
                document.getElementById('predictionResult').className = 'alert alert-success';
                document.getElementById('predictionResult').innerHTML = `
                    <h5>Prediction Result</h5>
                    <p><strong>Decision:</strong> ${result.voting.decision === 0 ? 'Normal' : 'Anomaly'}</p>
                    <p><strong>Confidence:</strong> ${(result.voting.confidence * 100).toFixed(1)}%</p>
                    <p><strong>Individual Votes:</strong> ${JSON.stringify(result.voting.votes)}</p>
                `;
            }
        });

        socket.on('new-prediction', function(prediction) {
            predictionHistory.unshift(prediction);
            if (predictionHistory.length > 100) {
                predictionHistory.pop();
            }
            renderPredictionHistory();
        });        socket.on('prediction-history', function(history) {
            predictionHistory = history;
            renderPredictionHistory();
        });

        socket.on('config-update', function(data) {
            console.log('Configuration updated:', data);
            // Refresh model status after configuration change
            socket.emit('request-health');
        });

        socket.on('success', function(data) {
            console.log('Success:', data.message);
            // You can add a toast notification here if desired
        });

        socket.on('error', function(data) {
            console.error('Socket error:', data.message);
            // You can add error handling/notification here if desired
        });

        function attachModelListeners(container) {
            // toggles
            container.querySelectorAll('.model-toggle').forEach(toggle => {
                if (toggle.dataset.listener) return;
                toggle.dataset.listener = 'true';
                toggle.addEventListener('change', function() {
                    const modelName = this.dataset.model;
                    const enabled = this.checked;
                    socket.emit('toggle-model', { modelName, enabled });
                });
            });

            // editable names
            container.querySelectorAll('.editable-name').forEach(span => {
                if (span.dataset.listener) return;
                span.dataset.listener = 'true';
                span.addEventListener('keydown', function(e) {
                    if (e.key === 'Enter') {
                        e.preventDefault();
                        this.blur();
                    }
                });

                span.addEventListener('blur', function() {
                    const modelName = this.dataset.model;
                    const newName = this.textContent.trim();
                    if (newName && modelDisplayNames[modelName] !== newName) {
                        fetch('/api/config/model/name', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ modelName, displayName: newName })
                        }).then(res => res.json()).then(() => {
                            modelDisplayNames[modelName] = newName;
                        });
                    }
                });
            });

            // delete buttons
            container.querySelectorAll('.delete-model').forEach(btn => {
                if (btn.dataset.listener) return;
                btn.dataset.listener = 'true';
                btn.addEventListener('click', async function() {
                    const modelName = this.dataset.model;
                    if (!confirm(`Delete model '${modelDisplayNames[modelName] || modelName}'?`)) return;
                    await fetch('/api/config/model/delete', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ modelName })
                    });
                    const cfg = await fetch('/api/config').then(r => r.json());
                    modelDisplayNames = {};
                    cfg.models.forEach(m => {
                        modelDisplayNames[m.name] = m.displayName || m.name;
                    });
                    socket.emit('request-health');
                });
            });
        }

        function renderModels(modelStatus) {
            const container = document.getElementById('modelsContainer');
            let html = '';
            for (const [modelName, status] of Object.entries(modelStatus)) {
                html += renderModel(modelName, status);
            }
            container.innerHTML = html;
            attachModelListeners(container);
        }

        function updateModelStatuses(modelStatus) {
            for (const [name, status] of Object.entries(modelStatus)) {
                const card = document.getElementById(`model-card-${name}`);
                if (!card) continue;
                const statusClass = {
                    'online': 'status-online',
                    'offline': 'status-offline',
                    'disabled': 'status-disabled',
                    'unknown': 'status-unknown'
                }[status.status] || 'status-unknown';

                const statusText = {
                    'online': 'Online',
                    'offline': 'Offline',
                    'disabled': 'Disabled',
                    'unknown': 'Unknown'
                }[status.status] || 'Unknown';

                const lastCheck = status.lastCheck ? formatDate(status.lastCheck) : 'Never';

                const statusEl = card.querySelector('.model-status');
                statusEl.className = `model-status ${statusClass}`;
                statusEl.textContent = statusText;

                const lastEl = card.querySelector('.model-lastcheck');
                if (lastEl) lastEl.textContent = `Last check: ${lastCheck}`;

                const toggle = card.querySelector('.model-toggle');
                if (toggle) toggle.checked = status.status !== 'disabled';
            }
        }

        // When DOM is ready        document.addEventListener('DOMContentLoaded', function () {
            predictionDetailsModal = new bootstrap.Modal(document.getElementById('predictionDetailsModal'));
            configModal = new bootstrap.Modal(document.getElementById('configModal'));
            filePreviewModal = new bootstrap.Modal(document.getElementById('filePreviewModal'));
            multipleDischargesModal = new bootstrap.Modal(document.getElementById('multipleDischargesModal'));

            fetch('/api/config')
                .then(response => response.json())
                .then(cfg => {
                    cfg.models.forEach(m => {
                        modelDisplayNames[m.name] = m.displayName || m.name;
                    });
                });

            document.getElementById('addModelBtn').addEventListener('click', async function () {
                const name = prompt('Model name:');
                if (!name) return;
                const url = prompt('Prediction URL:');
                if (!url) return;
                const trainingUrl = prompt('Training URL:');
                if (!trainingUrl) return;
                const healthUrl = prompt('Health URL:');
                if (!healthUrl) return;

                await fetch('/api/config/model/add', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ name, url, trainingUrl, healthUrl })
                });

                const cfg = await fetch('/api/config').then(r => r.json());
                modelDisplayNames = {};
                cfg.models.forEach(m => {
                    modelDisplayNames[m.name] = m.displayName || m.name;
                });
                socket.emit('request-health');
            });

            document.getElementById('refreshBtn').addEventListener('click', function () {
                socket.emit('request-health');
            });

            document.getElementById('loadDisruptionTimesBtn').addEventListener('click', async function () {
                const fileInput = document.getElementById('disruptionTimesFile');
                if (!fileInput.files || fileInput.files.length === 0) {
                    alert('Select a file to load disruption times');
                    return;
                }

                try {
                    const content = await readFileAsText(fileInput.files[0]);
                    const disruptions = parseDisruptionTimesFile(content);
                    const appliedCount = applyDisruptionTimesToDischarges(disruptions);

                    updateJsonPreview();
                    alert(`${appliedCount} disruption times have been applied`);
                } catch (error) {
                    alert('Error at processing disruption times: ' + error.message);
                }
            });

            // Event listener to download JSON
            document.getElementById('downloadJsonBtn').addEventListener('click', function () {
                try {
                    const trainingData = processDischargesForTraining();

                    // Create file to download
                    const dataStr = JSON.stringify(trainingData, null, 2);
                    const blob = new Blob([dataStr], { type: 'application/json' });
                    const url = URL.createObjectURL(blob);

                    // Create download link and execute it
                    const downloadLink = document.createElement('a');
                    downloadLink.href = url;
                    downloadLink.download = 'training_data.json';
                    document.body.appendChild(downloadLink);
                    downloadLink.click();
                    document.body.removeChild(downloadLink);
                    URL.revokeObjectURL(url);
                } catch (error) {
                    alert('Error generating JSON: ' + error.message);
                }
            });

            document.getElementById('sensorFilesInput').addEventListener('change', async function (e) {
                if (e.target.files.length === 0) return;

                try {
                    for (const file of e.target.files) {
                        const content = await readFileAsText(file);
                        sensorFiles.push({
                            name: file.name,
                            content: content
                        });
                    }
                    renderSensorFiles();
                } catch (error) {
                    alert('Error reading files: ' + error.message);
                }
            });

            document.getElementById('processSensorFilesBtn').addEventListener('click', function () {
                try {
                    const processedData = processSignalFiles(sensorFiles);

                    socket.emit('run-prediction', processedData);

                    document.getElementById('predictionResultContainer').style.display = 'block';
                    document.getElementById('predictionResult').innerHTML = `
                        <div class="text-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2">Processing prediction...</p>
                        </div>
                    `;
                    document.getElementById('predictionResult').className = 'alert';
                    console.log('Processed data:', processedData);
                } catch (error) {
                    console.error('Error processing sensor files:', error);
                    document.getElementById('predictionResultContainer').style.display = 'block';
                    document.getElementById('predictionResult').innerHTML = `Error: ${error.message}`;
                    document.getElementById('predictionResult').className = 'alert alert-danger';
                }
            });            // Event listener for the add discharge button
            document.getElementById('addDischargeBtn').addEventListener('click', function () {
                addDischarge();
            });

            // Event listener for the add multiple discharges button
            document.getElementById('addMultipleDischargesBtn').addEventListener('click', function () {
                showMultipleDischargesModal();
            });

            // Event listener for the toggle preview button
            document.getElementById('togglePreviewBtn').addEventListener('click', function () {
                const previewContainer = document.getElementById('jsonPreviewContainer');
                if (previewContainer.style.display === 'none') {
                    previewContainer.style.display = 'block';
                    updateJsonPreview();
                } else {
                    previewContainer.style.display = 'none';
                }
            });

            // Event listener for processing discharges for training
            document.getElementById('processDischargesBtn').addEventListener('click', function () {
                try {
                    const trainingData = processDischargesForTraining();

                    fetch('/api/train', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(trainingData)
                    })
                        .then(response => response.json())
                        .then(result => {
                            document.getElementById('trainingResultContainer').style.display = 'block';

                            if (result.error) {
                                document.getElementById('trainingResult').className = 'alert alert-danger';
                                document.getElementById('trainingResult').innerHTML = `Error: ${result.error}`;
                            } else {
                                document.getElementById('trainingResult').className = 'alert alert-success';
                                document.getElementById('trainingResult').innerHTML = `
                                <h5>Entrenamiento iniciado</h5>
                                <p>${result.message}</p>
                                <p>Modelos exitosos: ${result.details.successful}</p>
                                <p>Modelos fallidos: ${result.details.failed}</p>
                                <p>Consulte los logs para más detalles.</p>
                            `;
                            }
                        })
                        .catch(error => {
                            document.getElementById('trainingResultContainer').style.display = 'block';
                            document.getElementById('trainingResult').className = 'alert alert-danger';
                            document.getElementById('trainingResult').innerHTML = `Error sending training data: ${error.message}`;
                        });

                    document.getElementById('trainingResultContainer').style.display = 'block';
                    document.getElementById('trainingResult').innerHTML = `
                        <div class="text-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2">Sending training data...</p>
                        </div>
                    `;
                    document.getElementById('trainingResult').className = 'alert';
                } catch (error) {
                    document.getElementById('trainingResultContainer').style.display = 'block';
                    document.getElementById('trainingResult').innerHTML = `Error: ${error.message}`;
                    document.getElementById('trainingResult').className = 'alert alert-danger';
                }
            });

            document.getElementById('predictionFile').addEventListener('change', async function (e) {
                if (e.target.files.length === 0) return;

                try {
                    const content = await readFileAsText(e.target.files[0]);
                    document.getElementById('testDataTextarea').value = content;
                } catch (error) {
                    alert('Error reading file: ' + error.message);
                }
            });

            document.getElementById('trainingFile').addEventListener('change', async function (e) {
                if (e.target.files.length === 0) return;

                try {
                    const content = await readFileAsText(e.target.files[0]);
                    document.getElementById('trainingDataTextarea').value = content;
                } catch (error) {
                    alert('Error reading file: ' + error.message);
                }
            });

            document.getElementById('testPredictionBtn').addEventListener('click', function () {
                const testDataElem = document.getElementById('testDataTextarea');
                try {
                    const testData = JSON.parse(testDataElem.value);
                    socket.emit('run-prediction', testData);

                    document.getElementById('predictionResultContainer').style.display = 'block';
                    document.getElementById('predictionResult').innerHTML = `
                        <div class="text-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Cargando...</span>
                            </div>
                            <p class="mt-2">Processing prediction...</p>
                        </div>
                    `;
                    document.getElementById('predictionResult').className = 'alert';
                } catch (error) {
                    document.getElementById('predictionResultContainer').style.display = 'block';
                    document.getElementById('predictionResult').innerHTML = `Error: Invalid JSON format`;
                    document.getElementById('predictionResult').className = 'alert alert-danger';
                }
            });

            document.getElementById('startTrainingBtn').addEventListener('click', function () {
                const trainingDataElem = document.getElementById('trainingDataTextarea');
                try {
                    const trainingData = JSON.parse(trainingDataElem.value);

                    if (!trainingData.discharges || !Array.isArray(trainingData.discharges)) {
                        throw new Error('The data must have a "discharges" array');
                    }

                    fetch('/api/train', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(trainingData)
                    })
                        .then(response => {
                            if (!response.ok) {
                                return response.json().then(err => { throw new Error(err.error || 'Error in the request'); });
                            }
                            return response.json();
                        })
                        .then(result => {
                            document.getElementById('trainingResultContainer').style.display = 'block';
                            document.getElementById('trainingResult').className = 'alert alert-success';
                            document.getElementById('trainingResult').innerHTML = `
                            <h5>Training started</h5>
                            <p>${result.message}</p>
                            <p>Successful models: ${result.details.successful}</p>
                            <p>Failed models: ${result.details.failed}</p>
                            <p>Check the logs for more details.</p>
                        `;
                        })
                        .catch(error => {
                            document.getElementById('trainingResultContainer').style.display = 'block';
                            document.getElementById('trainingResult').className = 'alert alert-danger';
                            document.getElementById('trainingResult').innerHTML = `Error: ${error.message}`;
                        });

                    document.getElementById('trainingResultContainer').style.display = 'block';
                    document.getElementById('trainingResult').innerHTML = `
                        <div class="text-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2">Sending training data...</p>
                        </div>
                    `;
                    document.getElementById('trainingResult').className = 'alert';
                } catch (error) {
                    document.getElementById('trainingResultContainer').style.display = 'block';
                    document.getElementById('trainingResult').innerHTML = `Error: ${error.message}`;
                    document.getElementById('trainingResult').className = 'alert alert-danger';
                }
            });            document.getElementById('configModal').addEventListener('show.bs.modal', function () {
                fetch('/api/config')
                    .then(response => response.json())
                    .then(config => {
                        renderModelConfig(config.models);
                    })
                    .catch(error => {
                        document.getElementById('modelConfigContainer').innerHTML = `
                        <div class="alert alert-danger">
                            Error at loading configuration: ${error.message}
                        </div>
                    `;
                    });
            });

            // Multiple Discharges Modal Event Listeners
            document.getElementById('multipleDischargeFiles').addEventListener('change', handleMultipleDischargeFilesChange);
            document.getElementById('testPatternsBtn').addEventListener('click', testMultipleDischargePatterns);
            document.getElementById('processMultipleDischargesBtn').addEventListener('click', processMultipleDischarges);
            
            // Reset modal when it's hidden
            document.getElementById('multipleDischargesModal').addEventListener('hidden.bs.modal', function () {
                resetMultipleDischargesModal();
            });
        let currentPreviewMode = null;
        let selectedSignalsForComparison = [];
        let selectedSignalsForMultiple = [];
        let singleComparisonChart = null;
        let multipleChartsArray = []; function selectPreviewMode(mode) {
            currentPreviewMode = mode;

            // Hide all interfaces
            document.getElementById('singleChartInterface').style.display = 'none';
            document.getElementById('multipleChartsInterface').style.display = 'none';

            // Show selected interface
            if (mode === 'single') {
                document.getElementById('singleChartInterface').style.display = 'block';
            } else if (mode === 'multiple') {
                document.getElementById('multipleChartsInterface').style.display = 'block';
            }

            // Update UI selection
            document.querySelectorAll('.preview-selection-item').forEach(item => {
                item.classList.remove('border-primary');
            });

            if (mode === 'single') {
                document.getElementById('singleChartMode').classList.add('border-primary');
            } else {
                document.getElementById('multipleChartsMode').classList.add('border-primary');
            }
        } function parseSignalData(content) {
            const lines = content.split('\n').filter(line => line.trim());
            const data = [];

            for (const line of lines) {
                const parts = line.trim().split(/\s+/);
                if (parts.length >= 2) {
                    const time = parseFloat(parts[0]);
                    const value = parseFloat(parts[1]);
                    if (!isNaN(time) && !isNaN(value)) {
                        data.push({ x: time, y: value });
                    }
                }
            }

            return data;
        }

        function plotSingleChart() {
            if (selectedSignalsForComparison.length === 0) return;

            const ctx = document.getElementById('singleComparisonChart').getContext('2d');

            // Destroy existing chart
            if (singleComparisonChart) {
                singleComparisonChart.destroy();
            }

            const datasets = selectedSignalsForComparison.map((signal, index) => {
                const data = parseSignalData(signal.content);
                const colors = [
                    'rgb(255, 99, 132)',
                    'rgb(54, 162, 235)',
                    'rgb(255, 205, 86)',
                    'rgb(75, 192, 192)',
                    'rgb(153, 102, 255)',
                    'rgb(255, 159, 64)',
                    'rgb(199, 199, 199)',
                    'rgb(83, 102, 147)'
                ];

                return {
                    label: signal.name,
                    data: data,
                    borderColor: colors[index % colors.length],
                    backgroundColor: colors[index % colors.length] + '20',
                    fill: false,
                    tension: 0.1,
                    pointRadius: 0
                };
            });

            singleComparisonChart = new Chart(ctx, {
                type: 'line',
                data: { datasets: datasets },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        x: {
                            type: 'linear',
                            position: 'bottom',
                            title: {
                                display: true,
                                text: 'Time'
                            }
                        },
                        y: {
                            title: {
                                display: true,
                                text: 'Signal Value'
                            }
                        }
                    },
                    plugins: {
                        title: {
                            display: true,
                            text: 'Signal Comparison Chart'
                        },
                        legend: {
                            display: true,
                            position: 'top'
                        }, tooltip: {
                            mode: 'index',
                            intersect: false,
                        }
                    }
                }
            });

            // Enable fullscreen button
            document.getElementById('singleChartFullscreenBtn').disabled = false;
        } function clearSingleChart() {
            if (singleComparisonChart) {
                singleComparisonChart.destroy();
                singleComparisonChart = null;
            }

            // Clear file input and selections
            document.getElementById('singleModeFiles').value = '';
            selectedSignalsForComparison.length = 0;
            updateSingleModeDisplay();
            document.getElementById('plotSingleBtn').disabled = true;

            // Disable fullscreen button
            document.getElementById('singleChartFullscreenBtn').disabled = true;
        }

        function plotMultipleCharts() {
            if (selectedSignalsForMultiple.length === 0) return;

            // Clear existing charts only (not the data)
            multipleChartsArray.forEach(chart => chart.destroy());
            multipleChartsArray.length = 0;

            const container = document.getElementById('multipleChartsContainer');

            // Determine grid class based on number of charts
            let gridClass = 'chart-grid ';
            if (selectedSignalsForMultiple.length === 1) {
                gridClass += 'multiple-charts-1';
            } else if (selectedSignalsForMultiple.length === 2) {
                gridClass += 'multiple-charts-2';
            } else if (selectedSignalsForMultiple.length === 3) {
                gridClass += 'multiple-charts-3';
            } else if (selectedSignalsForMultiple.length === 4) {
                gridClass += 'multiple-charts-4';
            } else {
                gridClass += 'multiple-charts-more';
            }

            container.className = gridClass;
            container.innerHTML = ''; selectedSignalsForMultiple.forEach((signal, index) => {
                const chartDiv = document.createElement('div');
                chartDiv.className = 'chart-container-preview';
                chartDiv.innerHTML = `
                    <div class="chart-title">${signal.name}</div>
                    <canvas id="multiChart_${index}"></canvas>
                `;
                container.appendChild(chartDiv);

                // Create chart
                const ctx = document.getElementById(`multiChart_${index}`).getContext('2d');
                const data = parseSignalData(signal.content);

                const chart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        datasets: [{
                            label: signal.name,
                            data: data,
                            borderColor: 'rgb(75, 192, 192)',
                            backgroundColor: 'rgba(75, 192, 192, 0.2)',
                            fill: false,
                            tension: 0.1,
                            pointRadius: 0
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            x: {
                                type: 'linear',
                                position: 'bottom',
                                title: {
                                    display: true,
                                    text: 'Time'
                                }
                            },
                            y: {
                                title: {
                                    display: true,
                                    text: 'Signal Value'
                                }
                            }
                        },
                        plugins: {
                            legend: {
                                display: false
                            },
                            tooltip: {
                                mode: 'index',
                                intersect: false,
                            }
                        }
                    }
                }); multipleChartsArray.push(chart);
            });

            // Enable fullscreen button
            document.getElementById('multipleChartsFullscreenBtn').disabled = false;
        }

        function clearMultipleCharts() {
            // Destroy all existing charts
            multipleChartsArray.forEach(chart => chart.destroy());
            multipleChartsArray.length = 0;            // Clear file input and selections
            document.getElementById('multipleModeFiles').value = '';
            selectedSignalsForMultiple.length = 0;
            updateMultipleModeDisplay();
            document.getElementById('plotMultipleBtn').disabled = true;

            // Disable fullscreen button
            document.getElementById('multipleChartsFullscreenBtn').disabled = true;

            // Clear container
            const container = document.getElementById('multipleChartsContainer');
            container.className = 'chart-grid';
            container.innerHTML = `
                <div class="text-center text-muted">
                    <p>Upload signal files and click "Plot All Charts" to view them</p>
                </div>
            `;
        }

        // File loading functions for Preview tab
        function loadSingleModeFiles() {
            const input = document.getElementById('singleModeFiles');
            const files = Array.from(input.files);

            if (files.length === 0) {
                return;
            }

            selectedSignalsForComparison.length = 0; // Clear previous selections

            files.forEach(file => {
                const reader = new FileReader();
                reader.onload = function (e) {
                    selectedSignalsForComparison.push({
                        name: file.name,
                        content: e.target.result
                    });

                    // Update display
                    updateSingleModeDisplay();

                    // If this is the last file, plot the chart
                    if (selectedSignalsForComparison.length === files.length) {
                        document.getElementById('plotSingleBtn').disabled = false;
                    }
                };
                reader.readAsText(file);
            });
        }

        function loadMultipleModeFiles() {
            const input = document.getElementById('multipleModeFiles');
            const files = Array.from(input.files);

            if (files.length === 0) {
                return;
            }

            selectedSignalsForMultiple.length = 0; // Clear previous selections

            files.forEach(file => {
                const reader = new FileReader();
                reader.onload = function (e) {
                    selectedSignalsForMultiple.push({
                        name: file.name,
                        content: e.target.result
                    });

                    // Update display
                    updateMultipleModeDisplay();

                    // If this is the last file, enable the plot button
                    if (selectedSignalsForMultiple.length === files.length) {
                        document.getElementById('plotMultipleBtn').disabled = false;
                    }
                };
                reader.readAsText(file);
            });
        }

        function updateSingleModeDisplay() {
            const container = document.getElementById('singleModeFilesList');
            if (!container) return;

            if (selectedSignalsForComparison.length === 0) {
                container.innerHTML = '<small class="text-muted">No files loaded</small>';
                return;
            }

            container.innerHTML = selectedSignalsForComparison.map(signal =>
                `<div class="badge bg-primary me-1 mb-1">${signal.name}</div>`
            ).join('');
        }

        function updateMultipleModeDisplay() {
            const container = document.getElementById('multipleModeFilesList');
            if (!container) return;

            if (selectedSignalsForMultiple.length === 0) {
                container.innerHTML = '<small class="text-muted">No files loaded</small>';
                return;
            } container.innerHTML = selectedSignalsForMultiple.map(signal =>
                `<div class="badge bg-info me-1 mb-1">${signal.name}</div>`
            ).join('');
        }        // Fullscreen functionality
        let fullscreenChart = null;
        let fullscreenMultipleCharts = [];

        function openSingleChartFullscreen() {
            if (!singleComparisonChart) return;

            const modal = document.getElementById('fullscreenModal');
            const title = document.getElementById('fullscreenChartTitle');
            const singleContainer = document.getElementById('fullscreenSingleChart');
            const multipleContainer = document.getElementById('fullscreenMultipleCharts');
            const canvas = document.getElementById('fullscreenChart');

            // Show single chart container, hide multiple
            singleContainer.style.display = 'flex';
            multipleContainer.style.display = 'none';

            title.textContent = 'Signal Comparison Chart - Fullscreen View';
            modal.style.display = 'flex';

            // Destroy existing fullscreen chart
            if (fullscreenChart) {
                fullscreenChart.destroy();
            }

            // Clone the chart data from single comparison chart
            const originalData = singleComparisonChart.data;
            const originalOptions = singleComparisonChart.options;

            // Create new chart in fullscreen
            const ctx = canvas.getContext('2d');
            fullscreenChart = new Chart(ctx, {
                type: 'line',
                data: JSON.parse(JSON.stringify(originalData)),
                options: {
                    ...JSON.parse(JSON.stringify(originalOptions)),
                    responsive: true,
                    maintainAspectRatio: false
                }
            });
        }

        function openMultipleChartsFullscreen() {
            if (selectedSignalsForMultiple.length === 0) return;

            const modal = document.getElementById('fullscreenModal');
            const title = document.getElementById('fullscreenChartTitle');
            const singleContainer = document.getElementById('fullscreenSingleChart');
            const multipleContainer = document.getElementById('fullscreenMultipleCharts');

            // Show multiple charts container, hide single
            singleContainer.style.display = 'none';
            multipleContainer.style.display = 'grid';

            title.textContent = 'Multiple Signal Charts - Fullscreen View';
            modal.style.display = 'flex';

            // Clear existing fullscreen charts
            fullscreenMultipleCharts.forEach(chart => chart.destroy());
            fullscreenMultipleCharts.length = 0;

            // Determine grid class based on number of charts
            let gridClass = 'fullscreen-multiple-charts ';
            if (selectedSignalsForMultiple.length === 1) {
                gridClass += 'charts-1';
            } else if (selectedSignalsForMultiple.length === 2) {
                gridClass += 'charts-2';
            } else if (selectedSignalsForMultiple.length === 3) {
                gridClass += 'charts-3';
            } else if (selectedSignalsForMultiple.length === 4) {
                gridClass += 'charts-4';
            } else {
                gridClass += 'charts-more';
            }

            multipleContainer.className = gridClass;
            multipleContainer.innerHTML = '';

            selectedSignalsForMultiple.forEach((signal, index) => {
                const chartDiv = document.createElement('div');
                chartDiv.className = 'fullscreen-chart-item';
                chartDiv.innerHTML = `
                    <div class="fullscreen-chart-title">${signal.name}</div>
                    <canvas id="fullscreenMultiChart_${index}"></canvas>
                `;
                multipleContainer.appendChild(chartDiv);

                // Create chart
                const ctx = document.getElementById(`fullscreenMultiChart_${index}`).getContext('2d');
                const data = parseSignalData(signal.content);

                const chart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        datasets: [{
                            label: signal.name,
                            data: data,
                            borderColor: 'rgb(75, 192, 192)',
                            backgroundColor: 'rgba(75, 192, 192, 0.2)',
                            fill: false,
                            tension: 0.1,
                            pointRadius: 0
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            x: {
                                type: 'linear',
                                position: 'bottom',
                                title: {
                                    display: true,
                                    text: 'Time'
                                }
                            },
                            y: {
                                title: {
                                    display: true,
                                    text: 'Signal Value'
                                }
                            }
                        },
                        plugins: {
                            legend: {
                                display: true,
                                position: 'top'
                            },
                            tooltip: {
                                mode: 'index',
                                intersect: false,
                            }
                        }
                    }
                });

                fullscreenMultipleCharts.push(chart);
            });
        }

        function closeFullscreenChart() {
            const modal = document.getElementById('fullscreenModal');
            modal.style.display = 'none';

            // Clean up single chart
            if (fullscreenChart) {
                fullscreenChart.destroy();
                fullscreenChart = null;
            }

            // Clean up multiple charts
            fullscreenMultipleCharts.forEach(chart => chart.destroy());
            fullscreenMultipleCharts.length = 0;

            // Clear containers
            document.getElementById('fullscreenSingleChart').style.display = 'none';
            document.getElementById('fullscreenMultipleCharts').style.display = 'none';
        }// Close fullscreen on Escape key
        document.addEventListener('keydown', function (event) {
            if (event.key === 'Escape') {
                closeFullscreenChart();
            }
        });

        // Close fullscreen when clicking outside the modal content
        document.getElementById('fullscreenModal').addEventListener('click', function (event) {
            if (event.target === this) {
                closeFullscreenChart();
            }
        });
    </script>
</body>

</html>